package vistas;

import dao.BibliotecaDAO;
import dao.JuegoDAO;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import modelos.Biblioteca;
import modelos.Juego;
import modelos.Usuario;
import util.JPAUtil;

/**
 *
 * @author Eloym
 */
public class VentanaTienda extends javax.swing.JFrame {

    private Usuario usuario;

    /**
     * Creates new form ventandaTienda
     */
    public VentanaTienda(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        maximizarVentanaConFondo();
        cargarJuegosEnTabla();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layeredFondo = new javax.swing.JLayeredPane();
        lblFondo = new javax.swing.JLabel();
        scrollTabla = new javax.swing.JScrollPane();
        tablaJuegos = new javax.swing.JTable();
        btnComprar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fondos/fondoInicial.jpg"))); // NOI18N
        layeredFondo.add(lblFondo);
        lblFondo.setBounds(0, 0, 1160, 860);

        tablaJuegos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Titulo", "Genero", "Plataforma", "Imagen"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollTabla.setViewportView(tablaJuegos);

        layeredFondo.setLayer(scrollTabla, javax.swing.JLayeredPane.MODAL_LAYER);
        layeredFondo.add(scrollTabla);
        scrollTabla.setBounds(10, 10, 660, 740);

        btnComprar.setFont(new java.awt.Font("Impact", 2, 24)); // NOI18N
        btnComprar.setText("Comprar");
        btnComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarActionPerformed(evt);
            }
        });
        layeredFondo.setLayer(btnComprar, javax.swing.JLayeredPane.MODAL_LAYER);
        layeredFondo.add(btnComprar);
        btnComprar.setBounds(700, 680, 180, 70);

        btnSalir.setFont(new java.awt.Font("Impact", 2, 24)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        layeredFondo.setLayer(btnSalir, javax.swing.JLayeredPane.MODAL_LAYER);
        layeredFondo.add(btnSalir);
        btnSalir.setBounds(10, 770, 180, 70);

        getContentPane().add(layeredFondo);
        layeredFondo.setBounds(0, 0, 1160, 860);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        MenuUsuario menuUsuario = new MenuUsuario(usuario);
        menuUsuario.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tablaJuegos.getSelectedRow();
        if (filaSeleccionada == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecciona un juego para comprar.");
            return;
        }

        // Obtener título del juego seleccionado en la tabla
        String tituloJuego = tablaJuegos.getValueAt(filaSeleccionada, 0).toString();

        JuegoDAO juegoDAO = new JuegoDAO(JPAUtil.getEntityManager());
        Juego juegoSeleccionado = juegoDAO.buscarPorTitulo(tituloJuego);
        if (juegoSeleccionado == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al encontrar el juego en la base de datos.");
            return;
        }

        // Comprobar si el usuario ya tiene el juego
        boolean yaTieneElJuego = usuario.getBiblioteca().stream()
                .anyMatch(b -> b.getJuego().getId().equals(juegoSeleccionado.getId()));

        if (yaTieneElJuego) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ya tienes este juego en tu biblioteca.");
        } else {
            // Agregar juego a la biblioteca del usuario
            // Aquí dependes de tu lógica para guardar en BD, ejemplo:
            Biblioteca nuevaEntrada = new Biblioteca();
            nuevaEntrada.setUsuario(usuario);
            nuevaEntrada.setJuego(juegoSeleccionado);
            nuevaEntrada.setFechaAdquisicion(java.time.LocalDate.now());

            // Guardar en la BD (depende de cómo implementes DAO)
            BibliotecaDAO bibliotecaDAO = new BibliotecaDAO(JPAUtil.getEntityManager());
            bibliotecaDAO.guardar(nuevaEntrada);

            // Actualizar la lista de la biblioteca del usuario localmente
            usuario.getBiblioteca().add(nuevaEntrada);

            javax.swing.JOptionPane.showMessageDialog(this, "Juego comprado y añadido a tu biblioteca.");

        }
    }//GEN-LAST:event_btnComprarActionPerformed

    public void maximizarVentanaConFondo() {
        // Maximizamos la ventana (con bordes y barra de título)
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setVisible(true);

        // Ajustamos el tamaño de los componentes al tamaño actual de la ventana
        Dimension tamaño = this.getSize();
        layeredFondo.setBounds(0, 0, tamaño.width, tamaño.height);
        lblFondo.setBounds(0, 0, tamaño.width, tamaño.height);

        // Añadimos un listener para que cuando redimensiones la ventana,
        // el fondo y la tabla se ajusten automáticamente
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                Dimension tamaño = getSize();
                layeredFondo.setBounds(0, 0, tamaño.width, tamaño.height);
                lblFondo.setBounds(0, 0, tamaño.width, tamaño.height);
            }
        });
    }

    public void cargarJuegosEnTabla() {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 3) { // Columna imagen (índice 3)
                    return Icon.class;
                }
                return String.class; // Otras columnas texto
            }
        };
        model.setColumnIdentifiers(new Object[]{"Título", "Género", "Plataforma", "Imagen"});

        JuegoDAO juegoDAO = new JuegoDAO(JPAUtil.getEntityManager());

        List<Juego> juegos = juegoDAO.listarTodos();
        for (Juego j : juegos) {
            // Cargar imagen o imagen por defecto si no existe
            String rutaImagen = j.getImagen();
            ImageIcon icon;
            if (rutaImagen == null || rutaImagen.isEmpty()) {
                // Imagen por defecto según plataforma (puedes ajustar rutas)
                switch (j.getPlataforma()) {
                    case PS ->
                        icon = new ImageIcon("imagenes/logos/ps.png");
                    case XBOX ->
                        icon = new ImageIcon("imagenes/logos/xbox.png");
                    case NINTENDO ->
                        icon = new ImageIcon("imagenes/logos/nintendo.png");
                    default ->
                        icon = new ImageIcon("imagenes/logos/defecto.png");
                }
            } else {
                icon = new ImageIcon(rutaImagen);
            }

            // Redimensionar la imagen para la tabla (60x60 px)
            Image img = icon.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
            icon = new ImageIcon(img);

            model.addRow(new Object[]{
                j.getTitulo(),
                j.getGenero(),
                j.getPlataforma().toString(),
                icon
            });
        }

        tablaJuegos.setModel(model);
        tablaJuegos.setRowHeight(65); // Altura fila para ver bien la imagen
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComprar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLayeredPane layeredFondo;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JScrollPane scrollTabla;
    private javax.swing.JTable tablaJuegos;
    // End of variables declaration//GEN-END:variables
}
